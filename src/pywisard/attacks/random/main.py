from pywisard.attacks.utils import get_wisard, eval_wisard
import numpy as np


def l2_noise(image, epsilon):
    """
    Adds L2-norm bounded noise to an image.

    The noise vector added has an L2 norm equal to epsilon.
    The noise is generated by creating a random vector (often from a standard
    normal distribution), normalizing it to unit L2 norm, and then
    scaling it by epsilon.

    Args:
        image (np.ndarray): The input image, assumed to have pixel values
                             typically in the range [0, 1].
        epsilon (float): The desired L2 norm (magnitude) of the noise vector
                         to be added. Must be non-negative.

    Returns:
        np.ndarray: The noisy image, clipped to the range [0, 1].
    """
    if epsilon < 0:
        raise ValueError("Epsilon must be non-negative.")

    # Ensure image is a numpy array
    image = np.asarray(image)

    # 1. Generate noise from standard normal distribution matching image shape
    # This gives a random direction.
    eta = np.random.randn(*image.shape)

    # 2. Calculate the L2 norm of the generated noise vector.
    # np.linalg.norm calculates the L2 norm for vectors (1D)
    # and the Frobenius norm for matrices (2D or higher), which is
    # sqrt(sum of squares of all elements), effectively the L2 norm
    # of the flattened array. This is typically what's desired.
    norm_eta = np.linalg.norm(eta)

    # Avoid division by zero if eta happens to be all zeros (highly unlikely)
    if norm_eta == 0:
        # If the random noise is zero, the scaled noise is also zero.
        noise = np.zeros_like(image)
    else:
        # 3. Normalize the noise vector (unit L2 norm) and scale by epsilon
        # This ensures the L2 norm of the final noise is exactly epsilon
        noise = epsilon * eta / norm_eta

    # 4. Add noise to the original image
    noisy_image = image + noise

    # 5. Clip the results to the valid range [0, 1]
    noisy_image = np.clip(noisy_image, 0, 1)

    return noisy_image


def linf_noise(image, epsilon):
    """
    Adds L-infinity norm bounded noise to an image.

    Each element of the noise is either +epsilon or -epsilon, chosen randomly.
    The L-infinity norm of the added noise is exactly epsilon.

    Args:
        image (np.ndarray): The input image, assumed to have pixel values
                             typically in the range [0, 1].
        epsilon (float): The desired L-infinity norm bound for the noise.
                         Must be non-negative.

    Returns:
        np.ndarray: The noisy image, clipped to the range [0, 1].
    """
    if epsilon < 0:
        raise ValueError("Epsilon must be non-negative.")
    image = np.asarray(image)

    noise = np.random.choice([-epsilon, epsilon], size=image.shape)
    noisy_image = image + noise
    noisy_image = np.clip(noisy_image, 0, 1)
    return noisy_image


def main():
    print("Bloom Wisard")
    bloom_wisard, X_test, y_test = get_wisard("bloom", with_eval=True)
    print("\nDict Wisard")
    dict_wisard, _, _ = get_wisard("dict", with_eval=True)

    X_noisy_linf = np.array([linf_noise(image, 0.1) for image in X_test])
    X_noisy_l2 = np.array([l2_noise(image, 3) for image in X_test])

    print("\n===== LINF =====\n")
    print("Bloom Wisard")
    eval_wisard(bloom_wisard, X_noisy_linf, y_test)
    print("\nDict Wisard")
    eval_wisard(dict_wisard, X_noisy_linf, y_test)

    print("\n===== L2 =====\n")
    print("Bloom Wisard")
    eval_wisard(bloom_wisard, X_noisy_l2, y_test)
    print("\nDict Wisard")
    eval_wisard(dict_wisard, X_noisy_l2, y_test)


if __name__ == "__main__":
    main()
